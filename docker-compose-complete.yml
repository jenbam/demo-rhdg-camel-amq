version: "3.9"

services:

  artemis:
    image: registry.redhat.io/amq7/amq-broker-rhel8:7.11.1
    container_name: artemis
    hostname: artemis
    restart: always
    ports:
      - "8161:8161"
      - "61616:61616"
      - "5672:5672"
    environment:
      TZ: Europe/Madrid
      AMQ_USER: quarkus
      AMQ_PASSWORD: quarkus
    healthcheck:
      test: /home/jboss/broker/bin/artemis check node | grep success
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s
    networks:
      - demo-network
    deploy:
      resources:
        limits:
          memory: "512M"
        reservations:
          memory: "256M"

  infinispan:
    image: registry.redhat.io/datagrid/datagrid-8-rhel8:1.4
    container_name: infinispan
    hostname: infinispan
    restart: always
    ports:
      - "11222:11222"
    environment:
      TZ: Europe/Madrid
      USER: quarkus
      PASS: password
    volumes:
      - ./infinispan.xml:/opt/infinispan/server/conf/infinispan.xml
    healthcheck:
      test: curl --fail http://127.0.0.1:11222 || exit 1
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s
    networks:
      - demo-network
    deploy:
      resources:
        limits:
          memory: "512M"
        reservations:
          memory: "256M"

  app1:
    image: app1:1.0
    container_name: app1
    hostname: app1
    build:
      context: app1
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: artemis
    ports:
      - "8091:8080"
    depends_on:
      infinispan:
        condition: service_healthy
      artemis:
        condition: service_healthy
    networks:
      - demo-network
    deploy:
      resources:
        limits:
          memory: "128M"
        reservations:
          memory: "20M"

  app2:
    image: app2:1.0
    container_name: app2
    hostname: app2
    build:
      context: app2
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: artemis
    ports:
      - "8092:8080"
    depends_on:
      infinispan:
        condition: service_healthy
      artemis:
        condition: service_healthy
    networks:
      - demo-network
    deploy:
      resources:
        limits:
          memory: "128M"
        reservations:
          memory: "20M"

  app1-camel-amq-datagrid:
    image: app1-camel-amq-datagrid:1.0
    container_name: app1-camel-amq-datagrid
    hostname: app1-camel-amq-datagrid
    build:
      context: app1-camel-amq-datagrid
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: artemis
      DG_HOST: infinispan
      APP1_HOST: app1
      APP1_PORT: 8091
    depends_on:
      infinispan:
        condition: service_healthy
      artemis:
        condition: service_healthy
    networks:
      - demo-network
    deploy:
      resources:
        limits:
          memory: "128M"
        reservations:
          memory: "20M"

  app2-camel-amq-datagrid:
    image: app2-camel-amq-datagrid:1.0
    container_name: app2-camel-amq-datagrid
    hostname: app2-camel-amq-datagrid
    build:
      context: app2-camel-amq-datagrid
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: artemis
      DG_HOST: infinispan
      APP2_HOST: app2
      APP2_PORT: 8092
    depends_on:
      infinispan:
        condition: service_healthy
      artemis:
        condition: service_healthy
    networks:
      - demo-network
    deploy:
      resources:
        limits:
          memory: "128M"
        reservations:
          memory: "20M"

  front-rest-cache-client:
    image: front-rest-cache-client:1.0
    container_name: front-rest-cache-client
    hostname: front-rest-cache-client
    build:
      context: front-rest-cache-client
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: artemis
      DG_HOST: infinispan
    ports:
      - "8090:8080"
    depends_on:
      infinispan:
        condition: service_healthy
      artemis:
        condition: service_healthy
    networks:
      - demo-network
    deploy:
      resources:
        limits:
          memory: "128M"
        reservations:
          memory: "20M"

  app-camel-rest-cache:
    image: app-camel-rest-cache:1.0
    container_name: app-camel-rest-cache
    hostname: app-camel-rest-cache
    build:
      context: app-camel-rest-cache
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      AMQP_HOST: artemis
      DG_HOST: infinispan
    ports:
      - "8089:8080"
    depends_on:
      infinispan:
        condition: service_healthy
      artemis:
        condition: service_healthy
    networks:
      - demo-network
    deploy:
      resources:
        limits:
          memory: "128M"
        reservations:
          memory: "20M"

  front-nodejs-rest-client:
    image: front-nodejs-rest-client:1.0
    container_name: front-nodejs-rest-client
    build:
      context: front-nodejs-rest-client
      dockerfile: Dockerfile
      args:
        API_HOST: localhost
        API_PORT: 8089
        API_PROTOCOL: http
    ports:
      - "3000:3000"
    depends_on:
      infinispan:
        condition: service_healthy
      artemis:
        condition: service_healthy
      app-camel-rest-cache:
        condition: service_started
    networks:
      - demo-network
    deploy:
      resources:
        limits:
          memory: "128M"
        reservations:
          memory: "20M"

networks:
  demo-network:
    name: demo-network
